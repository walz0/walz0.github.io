{"version":3,"sources":["Logo.js","App.js","serviceWorker.js","index.js"],"names":["Logo","viewBox","className","class","d","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAkBeA,MAhBf,WACI,OACI,yBAAKC,QAAQ,cAAcC,UAAU,QACjC,0BAAMC,MAAM,MAAMC,EAAE,q7B,KCejBC,MAhBf,WACE,OACE,yBAAKH,UAAU,OACb,4BAAQA,UAAU,UAChB,kBAAC,EAAD,MACA,uBAAGA,UAAU,cAAb,UAGA,uBAAGA,UAAU,eAAb,0CCAYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1b2c59ba.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Logo () {\r\n    return (\r\n        <svg viewBox=\"0 0 800 800\" className=\"logo\">\r\n            <path class=\"st0\" d=\"M762,355C725.06,165.9,603.76,29.38,376,33c-13,2-26,4-39,6c-38.63,9.69-79.34,18.02-110,36\r\n            C122.33,136.38,62.31,220.86,37,363c-0.67,23.33-1.33,46.67-2,70c0,39.66,0,79.34,0,119c8.67,7.33,17.33,14.67,26,22\r\n            c28.93,36.63,45.82,96.39,39,162c25.65,2.82,49.08,10.16,69,19c36-51.99,72-104.01,108-156c-2.05-19.48-23.46-29.51-29-46\r\n            c-3.46-10.29-2.74-28.32-1-39c11.24-68.84,42.99-114.23,103-133c101.92-31.87,175.27,37.99,194,111c5.17,20.14,7.89,52.05,0,73\r\n            c-7,10-14,20-21,30c2.14,16.28,18.74,30.26,27,42c26.33,38.66,52.67,77.34,79,116c7.4,2.5,52.48-15.29,71-17\r\n            c-7.19-76.91,14.35-157.21,65-183C765.1,491.11,772.92,410.89,762,355z M637,416c-0.33,0-0.67,0-1,0\r\n            c-32.78-101.46-196.91-190.09-335-134c-42.27,17.17-81.86,44.41-108,78c-9.67,14.33-19.33,28.67-29,43c0,0.67,0,1.33,0,2\r\n            c-9.74-24.47,11.43-80.26,18-96c25.7-61.62,71.47-106.43,134-131c12.03-4.73,32.46-9.7,39.25-11.02c8.18-1.6,19.74-3.34,29.75-3.98\r\n            C536.77,162.22,639.14,263.15,637,416z\"/>\r\n        </svg>    \r\n    );\r\n}\r\n\r\nexport default Logo","import React from 'react';\nimport Logo from './Logo';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <Logo/>\n        <p className=\"title_text\">\n          Palace\n        </p>\n        <p className=\"description\">\n          The concept visualization platform.\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}